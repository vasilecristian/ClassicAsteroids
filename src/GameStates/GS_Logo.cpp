////////////////////////////////////////////////////////////////////////////////////////////////////
//

#include "GameStates/GS_Logo.h"
#include "GameStates/GS_MenuMain.h"
#include "GameManager.h"
#include "GameStatesBase/StatesStack.h"
#include "GameStates/GS_MenuMain.h"

#include "IwDebug.h"

////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////
//
using namespace m2dkit;

////////////////////////////////////////////////////////////////////////////////////////////////////
//

GS_Logo::GS_Logo(std::weak_ptr<m2dkit::engine::CGameManager> gamePtr) 
	: m_gameWeakPtr(gamePtr), m_timer(2), m_sceneId(-1)
{
	

}
////////////////////////////////////////////////////////////////////////////////////////////////////
//
GS_Logo::~GS_Logo()
{
	m_gameWeakPtr.reset();
  
}
////////////////////////////////////////////////////////////////////////////////////////////////////
//
int GS_Logo::Create()
{
	if (auto game = m_gameWeakPtr.lock())
	{
		core::CSceneContainer* sc = game->GetSceneContainer();
		const int zIndex = 0;
		bool sceneLoadedOK = sc->LoadSceneFromDisk("Logo.json", "Logo.resources", zIndex, &m_sceneId, 0, true);
		IwAssertMsg(2DENGINE, sceneLoadedOK, ("%s not found!", "Logo.json or Logo.resources"));
	}
	return true;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
//
void GS_Logo::Resume()
{
	
}
////////////////////////////////////////////////////////////////////////////////////////////////////
//
void GS_Logo::Release()
{
	if (auto game = m_gameWeakPtr.lock())
	{
		core::CSceneContainer* sc = game->GetSceneContainer();
		sc->DestroyScene(m_sceneId);
	}
}
////////////////////////////////////////////////////////////////////////////////////////////////////
//

////////////////////////////////////////////////////////////////////////////////////////////////////
void GS_Logo::Update(float dt)
{
	if (m_timer > 0)
	{
		m_timer -= dt;
		return;
	}

	if (auto game = m_gameWeakPtr.lock())
	{
		auto ss = game->GetStateStack();
		auto menuMain = std::shared_ptr<gs::GameState>(new GS_MenuMain(game));
		ss->PushState(menuMain);
		menuMain = nullptr;
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////
//
void GS_Logo::Render()
{
	
}
////////////////////////////////////////////////////////////////////////////////////////////////////
//
